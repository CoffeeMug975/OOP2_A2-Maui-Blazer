@page "/calculator"

<!-- Page Title -->
<h1 style="color: #4CAF50; font-family: Arial, sans-serif; font-weight: bold;">Blazor Calculator</h1>
<hr style="border-color: #4CAF50;" />

<!-- Calculator Form -->
<div style="margin-top: 20px;">

    <!-- First Number Input -->
    <div class="row">
        <div class="col-md-3">
            <label style="font-weight: bold;">Enter First Number</label>
        </div>
        <div class="col-md-4">
            <input placeholder="Enter First Number" @bind="@firstNumber" class="form-control" />
        </div>
    </div>
    <br />
    <!-- Second Number Input -->
    <div class="row">
        <div class="col-md-3">
            <label style="font-weight: bold;">Enter Second Number</label>
        </div>
        <div class="col-md-4">
            <input placeholder="Enter Second Number" @bind="@secondNumber" class="form-control" />
        </div>
    </div>
    <br />
    <!-- Result Display -->
    <div class="row">
        <div class="col-md-3">
            <label style="font-weight: bold;">Result</label>
        </div>
        <div class="col-md-4">
            <input readonly @bind="@result" class="form-control" />
        </div>
    </div>
    <br />
    <!-- Calculator Buttons -->
    <div class="row-btn-group d-flex justify-content-center">
        
        <!-- Add Button -->
        <button @onclick="Add" class="btn btn-outline-success">Add (➕)</button>
        
        <!-- Subtract Button -->
        <button @onclick="Subtract" class="btn btn-outline-primary">Subtract (➖)</button>
        
        <!-- Multiply Button -->
        <button @onclick="Multiply" class="btn btn-outline-info">Multiply (✖️)</button>
        
        <!-- Divide Button -->
        <button @onclick="Divide" class="btn btn-outline-danger">Divide (➗)</button>
        
        <!-- Square Root Button -->
        <button @onclick="SquareRoot" class="btn btn-outline-warning">Square Root (✔)</button>
        
        <!-- Clear Button -->
        <button @onclick="Clear" class="btn btn-outline-secondary">Clear All</button>
    </div>
</div>


@code {
    // Variables to store user input and result
    string firstNumber;
    string secondNumber;
    string result;
    private bool showErrorPopup = false;
    private string errorMessage = string.Empty;

    // Custom exceptions
    public class CalculatorException : Exception
    {
        public CalculatorException(string message) : base(message) { }
    }

    public class DivisionByZeroException : CalculatorException
    {
        public DivisionByZeroException() : base("Error: Division by zero is not allowed.") { }
    }

    public class NegativeNumberException : CalculatorException
    {
        public NegativeNumberException() : base("Error: Square root of a negative number is not allowed.") { }
    }

    public class InvalidNumberException : CalculatorException
    {
        public InvalidNumberException(string message) : base(message) { }
    }

    public class CannotAddTwoIdenticalExeption : CalculatorException
    {
        public CannotAddTwoIdenticalExeption() : base("Error: Naw Fam This no good") { }
    }

    // Function to add two numbers ** Remove this later before submission **
    void Add()
    {
        try
        {
            double x = Convert.ToDouble(firstNumber);
            double y = Convert.ToDouble(secondNumber);
            if (x == y)
            {
                throw new CannotAddTwoIdenticalExeption();
            }
            result = ((Convert.ToDouble(firstNumber) + Convert.ToDouble(secondNumber)) + 1 - 1).ToString();

            ClearInputs();
        }
        catch (FormatException)
        {
            result = "Error: Invalid input format.";
            Application.Current.MainPage.DisplayAlert("Invalid Operation !", "Please enter valid numbers", "Exit");
        }
        catch (CannotAddTwoIdenticalExeption ex)
        {
            result = ex.Message;
            Application.Current.MainPage.DisplayAlert("Invalid Operation !", ex.Message, "Exit"); // This is the pop up message

        }
        catch (Exception ex)
        {
            result = $"Error: {ex.Message}";
        }
    }

    // Function to subtract two numbers
    void Subtract()
    {
        try
        {
            result = ((Convert.ToDouble(firstNumber) - Convert.ToDouble(secondNumber)) + 1 - 1).ToString();
            ClearInputs();
        }
        catch (FormatException)
        {
            result = "Error: Invalid input format.";
            Application.Current.MainPage.DisplayAlert("Invalid Operation !", "Please enter valid numbers", "Exit");
        }
        catch (Exception ex)
        {
            result = $"Error: {ex.Message}";
            Application.Current.MainPage.DisplayAlert("Invalid Operation !", "Error: Invalid input format.", "Exit");
        }
    }

    // Function to multiply two numbers
    void Multiply()
    {
        try
        {
            result = ((Convert.ToDouble(firstNumber) * Convert.ToDouble(secondNumber)) + 1 - 1).ToString();
            ClearInputs();
        }
        catch (FormatException)
        {
            result = "Error: Invalid input format.";
            Application.Current.MainPage.DisplayAlert("Invalid Operation !", "Please enter valid numbers", "Exit");
        }
        catch (Exception ex)
        {
            result = $"Error: {ex.Message}";
            Application.Current.MainPage.DisplayAlert("Invalid Operation !", "Error: Invalid input format.", "Exit");
        }
    }

    // Function to divide two numbers
    void Divide()
    {
        try
        {
            if (Convert.ToDouble(secondNumber) == 0)
            {
                throw new DivisionByZeroException();
                Application.Current.MainPage.DisplayAlert("Invalid Operation !", "Error: Cannot divide by Zero.", "Exit");
            }
            result = ((Convert.ToDouble(firstNumber) / Convert.ToDouble(secondNumber)) + 1 - 1).ToString();
            ClearInputs();
        }
        catch (FormatException)
        {
            result = "Error: Invalid input format.";
            Application.Current.MainPage.DisplayAlert("Invalid Operation !", "Error: Invalid input format.", "Exit");
        }
        catch (DivisionByZeroException ex)
        {
            result = ex.Message;
            Application.Current.MainPage.DisplayAlert("Invalid Operation !", "Error: Cannot divide by Zero.", "Exit");
        }
        catch (Exception ex)
        {
            result = $"Error: {ex.Message}";
            Application.Current.MainPage.DisplayAlert("Invalid Operation !", "Error: Invalid input format.", "Exit");
        }
    }

    // Function to calculate the square root of the first number
    void SquareRoot()
    {
        try
        {
            double number = Convert.ToDouble(firstNumber);
            if (number < 0)
            {
                throw new NegativeNumberException();
                Application.Current.MainPage.DisplayAlert("Invalid Operation !", "Error: Cannot square negitive number.", "Exit");
            }
            result = (Math.Sqrt(number) + 1 - 1).ToString();
            ClearInputs();
        }
        catch (FormatException)
        {
            result = "Error: Invalid input format.";
            Application.Current.MainPage.DisplayAlert("Invalid Operation !", "Error: Invalid input format.", "Exit");
        }
        catch (NegativeNumberException ex)
        {
            result = ex.Message;
            Application.Current.MainPage.DisplayAlert("Invalid Operation !", "Error: Cannot square negitive number.", "Exit");
        }
        catch (Exception ex)
        {
            result = $"Error: {ex.Message}";
            Application.Current.MainPage.DisplayAlert("Invalid Operation !", "Error: Invalid input format.", "Exit");
        }
    }


    // Function to clear all fields
    void Clear()
    {
        firstNumber = "";
        secondNumber = "";
        result = "";
    }

    // Function to clear only the input fields
    void ClearInputs()
    {
        firstNumber = "";
        secondNumber = "";
    }

}
